# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:52:48+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from starlette.requests import Request

from models import (
    AvailabilityRequests,
    AvailabilityResults,
    Closest1,
    Error,
    StatusCode,
)

app = MCPProxy(
    contact={'x-twitter': 'internetarchive'},
    description="API for Internet Archive's Wayback Machine",
    title='Wayback API',
    version='1.0.0',
    servers=[{'url': 'https://api.archive.org'}],
)


@app.get('/wayback/v1/available', tags=['wayback_machine_access'])
def get_wayback_v1_available(
    url: str,
    timestamp: Optional[str] = None,
    callback: Optional[str] = None,
    timeout: Optional[float] = 5,
    closest: Optional[Closest1] = 'either',
    status_code: Optional[StatusCode] = None,
    tag: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/wayback/v1/available', tags=['wayback_machine_access'])
def post_wayback_v1_available(
    url: str,
    timestamp: Optional[str] = None,
    callback: Optional[str] = None,
    timeout: Optional[float] = 5,
    closest: Optional[Closest1] = 'either',
    status_code: Optional[StatusCode] = None,
    tag: Optional[str] = None,
    body: AvailabilityRequests = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
