# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:52:48+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class Closest(Enum):
    either = 'either'
    after = 'after'
    before = 'before'


class AvailabilityRequest(BaseModel):
    closest: Optional[Closest] = Field(
        None,
        description='The direction to find the closest snapshot to the requested timestamp',
    )
    tag: Optional[str] = Field(
        None, description='A user-supplied tag, used for collation'
    )
    timestamp: Optional[str] = Field(
        None,
        description='Timestamp requested in ISO 8601 format. The following formats are acceptable: - YYYY - YYYY-MM - YYYY-MM-DD - YYYY-MM-DDTHH:mm:SSz - YYYY-MM-DD:HH:mm+00:00\n',
    )
    url: str = Field(..., description='The URL requested')


class AvailabilityRequests(RootModel[List[AvailabilityRequest]]):
    root: List[AvailabilityRequest] = Field(
        ...,
        examples=[
            [
                {
                    'tag': '0',
                    'timestamp': '2016-04-07T19:39:18Z',
                    'url': 'http://www.entish.org',
                },
                {'tag': '1', 'url': 'http://www.cnn.com/'},
                {
                    'tag': '2',
                    'timestamp': '2016-04-07T19:39:18Z',
                    'url': 'http://www.youcantfindthis.cat',
                },
            ]
        ],
    )


class Error(BaseModel):
    code: Optional[int] = None
    message: Optional[str] = None


class Snapshot(BaseModel):
    status: Optional[int] = Field(
        None, description='The HTTP status of the URL requested'
    )
    timestamp: Optional[str] = Field(
        None,
        description='The timestamp of the snapshot in [RFC 3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html) format',
    )
    url: Optional[str] = Field(None, description='The URL requested')


class Closest1(Enum):
    either = 'either'
    before = 'before'
    after = 'after'


class StatusCode(Enum):
    integer_200 = 200
    integer_201 = 201
    integer_202 = 202
    integer_203 = 203
    integer_204 = 204
    integer_205 = 205
    integer_206 = 206
    integer_300 = 300
    integer_301 = 301
    integer_302 = 302
    integer_303 = 303
    integer_304 = 304
    integer_305 = 305
    integer_306 = 306
    integer_307 = 307
    integer_308 = 308
    integer_400 = 400
    integer_401 = 401
    integer_402 = 402
    integer_403 = 403
    integer_404 = 404
    integer_405 = 405
    integer_406 = 406
    integer_407 = 407
    integer_408 = 408
    integer_409 = 409
    integer_410 = 410
    integer_411 = 411
    integer_412 = 412
    integer_413 = 413
    integer_414 = 414
    integer_415 = 415
    integer_416 = 416
    integer_417 = 417
    integer_418 = 418
    integer_421 = 421
    integer_426 = 426
    integer_428 = 428
    integer_429 = 429
    integer_431 = 431
    integer_500 = 500
    integer_501 = 501
    integer_502 = 502
    integer_503 = 503
    integer_504 = 504
    integer_505 = 505
    integer_506 = 506
    integer_507 = 507
    integer_511 = 511


class ArchivedResult(BaseModel):
    snapshot: Snapshot
    tag: Optional[str] = Field(
        None, description='The user-supplied tag for use in collation'
    )
    timestamp: str = Field(
        ...,
        description='The _intepreted_ timestamp requested, in [RFC 3339](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html) format',
    )
    url: str = Field(..., description='The URL requested')


class AvailabilityResults(BaseModel):
    results: List[ArchivedResult] = Field(..., description='A list of results')
